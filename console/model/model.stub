<?php namespace {{studly_author}}\{{studly_plugin}}\Models;

use Model;

/**
 * {{name}} Model
 */

class {{studly_name}} extends Model
{
    use \October\Rain\Database\Traits\Validation;
{% if configs.trait_nested %}
    use \October\Rain\Database\Traits\NestedTree;
{% endif %}
{% if configs.trait_soft_delete %}
    use \October\Rain\Database\Traits\SoftDelete;
{% endif %}
{% if configs.trait_reorder %}
    use \October\Rain\Database\Traits\Sortable;
{% endif %}
{% if configs.trait_cloudi %}
    use \Waka\Cloudis\Classes\Traits\Cloudi;
{% endif %}
{% if configs.trait_datasource %}
    use \Waka\Utils\Classes\Traits\DataSourceHelpers;
{% endif %}
{% if configs.trait_workflow %}
    use \ZeroDaHero\LaravelWorkflow\Traits\WorkflowTrait;
{% endif %}

    /**
     * @var string The database table used by the model.
     */
    public $table = '{{lower_author}}_{{lower_plugin}}_{{snake_plural_name}}';

{% if configs.string_id %}
    //ID string
    public $incrementing = false;
    protected $keyType = 'string';
{% endif %}
{% if configs.trait_purgeable %}
    public $implement = [
        'October.Rain.Database.Behaviors.Purgeable',
    ];
    public $purgeable = ['change_state'];
{% endif %}
{% if configs.no_timestamps %}
    /**
     * @var boolean supprime la gestion des timestamps
     */
    public $timestamps = false;
{% endif %}

    /**
     * @var array Guarded fields
     */
    protected $guarded = ['*'];

    /**
     * @var array Fillable fields
     */
    protected $fillable = [];

    /**
     * @var array Validation rules for attributes
     */
    public $rules = [
{% for key,required in requireds %}
        '{{key}}' => '{{required}}',
{% endfor %}
    ];

    /**
     * @var array attributes send to datasource for creating document
     */
    public $attributesToDs = [
{% for field in attributes %}
{%if field.type is null%}
        '{{field.var}}',
{% endif %}
{% endfor %}
    ];

    /**
     * @var array Attributes to be cast to native types
     */
    protected $casts = [];

    /**
     * @var array Attributes to be cast to JSON
     */
    protected $jsonable = [
{% for key,json in jsons %}
        '{{key}}',
{% endfor %}
    ];

    /**
     * @var array Attributes to be appended to the API representation of the model (ex. toArray())
     */
    protected $appends = [
{% for key,append in appends %}
        '{{key}}',
{% endfor %}
    ];

    /**
     * @var array Attributes to be removed from the API representation of the model (ex. toArray())
     */
    protected $hidden = [];

    /**
     * @var array Attributes to be cast to Argon (Carbon) instances
     */
    protected $dates = [
{% if not configs.no_timestamps %}
        'created_at',
        'updated_at',
{% endif %}
{% if configs.trait_soft_delete %}
        'deleted_at',
{% endif %}
{% for key,date in dates %}
        '{{key}}',
{% endfor %}
    ];

    /**
     * @var array Relations
     */
    public $hasOne = [];
    public $hasMany = [
{% for relation in configs.hasmany %}
        '{{relation.relation_name| lowercase}}s' => 'Waka\{{relation.plugin_name| ucfirst }}\Models\{{relation.relation_class | ucfirst}}',
{% endfor %}
    ];
    public $hasOneThrough = [];
    public $hasManyThrough = [];
    public $belongsTo = [
{% for relation in configs.belong %}
{% if relation.type == 'user' %}
        '{{relation.relation_name| lowercase}}' => '{{relation.relation_class}}',
{% else %}
        '{{relation.relation_name| lowercase}}' => 'Waka\{{relation.plugin_name| ucfirst }}\Models\{{relation.relation_class | ucfirst}}',
{% endif %}
{% endfor %}
    ];
    public $belongsToMany = [];
    public $morphTo = [];
    public $morphOne = [];
    public $morphMany = [];
    public $attachOne = [
{% for relation in configs.attachOne %}
        '{{relation.relation_name| lowercase}}' => '{{relation.relation_class}}',
{% endfor %}
    ];
    public $attachMany = [
{% for relation in configs.attachMany %}
        '{{relation.relation_name| lowercase}}' => '{{relation.relation_class}}',
{% endfor %}
    ];

    /**
     *EVENTS
     **/
{% if configs.beforeValidate %}
    public function beforeValidate()
    {

    }

{% endif %}
{% if configs.beforeSave %}
    public function beforeSave() 
    {

    }

{% endif %}
{% if configs.afterSave %}
    public function afterSave() 
    {

    }

{% endif %}
{% if configs.beforeCreate %}
    public function beforeCreate() 
    {

    }

{% endif %}
{% if configs.afterCreate %}
    public function afterCreate() 
    {

    }

{% endif %}
{% if configs.beforeDelete %}
    public function beforeDelete() 
    {

    }

{% endif %}
{% if configs.afterDelete %}
    public function afterDelete() 
    {

    }

{% endif %}

    /**
     * LISTS
     **/
{% for key,list in configs.lists %}
    public function {{ list  }}()
    {
        return [];
    }
{% endfor %}

    /**
     * GETTER
     **/
{% for key,getter in getters %}
    public function get{{ key | camelCase | ucfirst }}Attribute()
    {
        return 'a configurer';
    }
{% endfor %}

    /**
     * SCOPES
     */

    /**
     * SETTERS
     */
}
